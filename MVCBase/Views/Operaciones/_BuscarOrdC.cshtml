@model List<CAMTEX.Entidades.OrdenesCompra>
@{ // Extraer los valores de MaeCCod en un array dentro de la vista
    var maeCCodArray = Model.Select(o => o.MaeCCod).ToList();
    var maeCCodJson = Newtonsoft.Json.JsonConvert.SerializeObject(maeCCodArray); // Convertir a JSON

}
<div id="frmRegistrar_@ViewBag.Id">
    <div class="form-horizontal">
        <div class="row">
            <div class="col-md-12">
                <div style="height:20px;"></div>
                <div class="form-horizontal">
                    <div class="form-group form-inline">
                        <div class="col-md-3" style="display: none">
                            <span class="input-group-btn">
                                <label>O/C:</label>
                                <input class="form-control input-sm text-box single-line" disabled="disabled"
                                       id="txtNumeroOrden_@ViewBag.Id" value="@Model[0].NumeroOrden">
                            </span>
                        </div>
                        <div class="col-md-3" style="display:none">
                            <input type="text" id="txtOI_@ViewBag.Id" class="form-control"
                                   value="@Model[0].id" readonly>
                        </div>
                        <div class="col-md-3">
                            <label>Prov:</label>
                            <input type="text" id="txtProveedor_@ViewBag.Id" class="form-control"
                                   value="@Model[0].PrvDDes" readonly>
                        </div>
                    </div>
                    <div class="form-group form-inline">
                        <div class="col-md-3">
                            <label for="txtTipo">Tipo:</label>
                            <input type="text" id="txtTipo_@ViewBag.Id" class="form-control"
                                   value="@Model[0].TarDNem" readonly>
                        </div>
                        <div class="col-md-3">
                            <label for="txtCond">Condición:</label>
                            <input type="text" id="txtCond_@ViewBag.Id" class="form-control"
                                   value="@Model[0].CNPDDes" readonly>
                        </div>
                        <div class="col-md-3">
                            <label for="txtFecha">Fecha:</label>
                            <input type="text" id="txtFecha_@ViewBag.Id" class="form-control"
                                   value="@(Model[0].FechaCreacion?.ToString("yyy-MM-dd") ?? DateTime.Now.ToString("yyyy-MM-dd"))" readonly>
                        </div>
                        <div class="col-md-3">
                            <label for="txtMoneda">Moneda:</label>
                            <input type="text" id="txtMoneda_@ViewBag.Id" class="form-control"
                                   value="@Model[0].OrcDMon" readonly>
                        </div>
                       
                    </div>
                    <div id="popupContainer"></div>
                    <hr style="border-top: 2px solid #33333347;" />
                    <div class="dx-viewport demo-container">
                        <div class="tabpanel-demo">
                            <div id="tabpanelS_@ViewBag.Id"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<div class="container mt-3">
    <!-- Menú de pestañas -->
    <ul class="nav nav-tabs" id="tabMenu_@ViewBag.Id">
        <li class="nav-item">
            <a class="nav-link active" href="#" data-target="tab1_@ViewBag.Id">Productos</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="#" data-target="tab2_@ViewBag.Id">Datos Importación</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="#" data-target="tab3_@ViewBag.Id">Lotes</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="#" data-target="tab4_@ViewBag.Id">Contenedores</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="#" data-target="tab5_@ViewBag.Id">Operaciones</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="#" data-target="tab6_@ViewBag.Id">Facturas Relacionadas</a>
        </li>
    </ul>

    <!-- Contenedores de paneles -->
    <div id="tab1_@ViewBag.Id" class="tab-contentss active">
        <div id="gridContainerP_@ViewBag.Id"></div>
    </div>

    <div id="tab2_@ViewBag.Id" class="tab-contentss" style="display: none;">
        <div class="container">
            <div class="form-group row">
                <div class="col-md-3">
                    <label>Nro Operación</label>
                    <input type="text" id="txtNOp_@ViewBag.Id" class="form-control" >
                </div>
            </div>

            <div class="row">
                <div class="col-md-4">
                    <label>DUA</label>
                    <input type="text" id="txtDUA_@ViewBag.Id" class="form-control" >
                </div>
                <div class="col-md-4">
                    <label>B/L AWB</label>
                    <input type="text" id="txtBL_@ViewBag.Id" class="form-control" >
                </div>
                <div class="col-md-4">
                    <label>Depósito</label>
                    <input type="text" id="txtDeposito_@ViewBag.Id" class="form-control" >
                </div>
            </div>

            <div class="row">
                <div class="col-md-4">
                    <label>Garantía</label>
                    <input type="text" id="txtGarantia_@ViewBag.Id" class="form-control" >
                </div>
                <div class="col-md-4">
                    <label>Nro Factura</label>
                    <input type="text" id="txtFactura_@ViewBag.Id" class="form-control" >
                </div>
                <div class="col-md-4">
                    <label>Fecha Factura</label>
                    <input type="date" id="txtFechaFactura_@ViewBag.Id" class="form-control" >
                </div>
            </div>

            <div class="row">
                <div class="col-md-4">
                    <label>Fecha Ingreso</label>
                    <input type="date" id="txtFechaIngreso_@ViewBag.Id" class="form-control" value="@DateTime.Now.ToString("yyyy-MM-dd")">
                </div>
                <div class="col-md-4">
                    <label>Situación</label>
                    <input type="text" id="txtSituacion_@ViewBag.Id" class="form-control" >
                </div>
                <div class="col-md-4">
                    <label>Línea Naviera</label>
                    <input type="text" id="txtLineaNaviera_@ViewBag.Id" class="form-control" >
                </div>
            </div>

            <div class="row">
                <div class="col-md-4">
                    <label>Fecha Logística</label>
                    <input type="date" id="txtFechaLogistica_@ViewBag.Id" class="form-control" >
                </div>
                <div class="col-md-4">
                    <label>Fecha Embarque</label>
                    <input type="date" id="txtFechaEmbarque_@ViewBag.Id" class="form-control" >
                </div>
                <div class="col-md-4">
                    <label>Fecha Depósito</label>
                    <input type="date" id="txtFechaDeposito_@ViewBag.Id" class="form-control" >
                </div>
            </div>

            <div class="row">
                <div class="col-md-4">
                    <label>Incoterm</label>
                    <input type="text" id="txtIncoterm_@ViewBag.Id" class="form-control" >
                </div>
                <div class="col-md-4">
                    <label>Vía</label>
                    <input type="text" id="txtVia_@ViewBag.Id" class="form-control" >
                </div>
            </div>

        </div>
    </div>

    <div id="tab3_@ViewBag.Id" class="tab-contentss" style="display: none;">
        <div class="form-group form-inline"><div class="col-md-3"><label>LOTES</label></div></div>
        <div id="gridContainerL_@ViewBag.Id"></div>
    </div>

    <div id="tab4_@ViewBag.Id" class="tab-contentss" style="display: none;">
        <div class="form-group form-inline"><div class="col-md-3"><label>CONTENEDORES</label></div></div>
        <div id="gridContainerC_@ViewBag.Id"></div>
    </div>

    <div id="tab5_@ViewBag.Id" class="tab-contentss" style="display: none;">
        <div class="form-group form-inline"><div class="col-md-3"><label>OPERACIONES</label></div></div>
        <div id="gridContainerO_@ViewBag.Id"></div>
    </div>

    <div id="tab6_@ViewBag.Id" class="tab-contentss" style="display: none;">
        <div class="form-group form-inline"><div class="col-md-3"><label>FACTURAS RELACIONADAS</label></div></div>
        <div id="gridContainerF_@ViewBag.Id"></div>
    </div>
</div>




<script>

    var id = "@ViewBag.Id"; // Obtener ID dinámico si es necesario

    var idOrdenCompra = null;
    console.log("id: ", id);
    var lista = @Html.Raw(maeCCodJson); // Convertir JSON en objeto JavaScript
    console.log("lista", lista);
    console.log("FileIDv", $("#FileIDv").val());
    var filecreado = $("#FileIDv").val();
    // Convertir el array a una cadena separada por comas para enviarlo en la URL
    var maeCCodString = lista.join(',');

    // Crear todos los dxDataGrid en sus respectivos contenedores
    $("#gridContainerP_" + id).dxDataGrid({
        dataSource: new DevExpress.data.ArrayStore({
            key: 'Codigo',
            data: [] // Se cargará después con `load`
        }),
        onInitialized(e) {
            let grid = e.component;
                sendRequest(`/Operaciones/ListarProductos?OcId=@Model[0].id&maeCCodList=${maeCCodString}`).then(data => {
                grid.option("dataSource", new DevExpress.data.ArrayStore({
                    key: 'Codigo',
                    data: data
                }));
            });
        },
        allowExpandAll: true,
        expandAll: true,
        keyExpr: 'Codigo',
        allowSorting: false,
        allowFiltering: true,
        allowColumnResizing: true,
        height: 300,
        fieldChooser: {
            enabled: false,
        },
        selection: {
            mode: "single" // Permite seleccionar una fila
        },
        editing: {
            //refreshMode: 'reshape',
            //mode: "cell", // Permite edición en celda
            //allowUpdating: true // Permite la edición de celdas
        },
        columns: [
            { dataField: 'Codigo', caption: 'Codigo', alignment: 'left', allowEditing: false },

            { dataField: 'OrcCItem', caption: 'OrcCItem', alignment: 'left', allowEditing: false  },
            { dataField: 'OrdenID', caption: 'OrdenID', alignment: 'left', allowEditing: false  },
            { dataField: 'OrccnSap', caption: 'OrccnSap', alignment: 'left', allowEditing: false },

            { dataField: 'Descripcion', caption: 'Descripcion', alignment: 'left', allowEditing: false },
            { dataField: 'Moneda', caption: 'Moneda', alignment: 'right', allowEditing: false },
            {
                dataField: 'PU', caption: 'P.U.', alignment: 'left', allowEditing: false,
                calculateCellValue(rowData) {
                    return rowData.PU ? rowData.PU.toFixed(2) : "0.00"; // Formatea a 2 decimales
                }
            },
            {
                dataField: 'Qty', caption: 'Qty.', alignment: 'left', allowEditing: false,

                setCellValue(newData, value) {
                    newData.Qty = Math.round(value); // Asegura que siempre sea entero
                },
                /*cellTemplate(container, options) {
                    $("<div>")
                        .text(options.value)
                        .css({
                            "background-color": "#ffffcc", // Color amarillo claro
                            "color": "#000", // Texto negro para contraste
                            "padding": "5px",
                            "border-radius": "5px"
                        })
                        .appendTo(container);
                },
                editorOptions: {
                    min: 0, // Evita valores negativos
                    showSpinButtons: true // Muestra botones para incrementar/decrementar
                },
                validationRules: [
                    { type: "required", message: "El valor no puede estar vacío." },
                    { type: "numeric", message: "Solo se permiten números." },
                    { type: "range", min: 0, message: "Debe ser 0 o mayor." }
                ]*/
            },
            {
                dataField: 'Valor', caption: 'Valor', alignment: 'right', allowEditing: false,
                calculateCellValue(rowData) {
                    return rowData.Valor ? rowData.Valor.toFixed(2) : "0.00"; // Formatea a 2 decimales
                }
            }
        ],
        summary: {
            totalItems: [
                {
                    column: "Valor",
                    summaryType: "sum",
                    valueFormat: "currency",
                    displayFormat: "Total: {0}",
                    alignment: "right"
                }
            ]
        },
        onRowUpdated(e) {
            let rowData = e.data; // Obtiene los datos de la fila editada
            if (rowData.Qty !== undefined && rowData.PU !== undefined) {
                rowData.Valor = rowData.PU * rowData.Qty; // Calcula el nuevo Valor
                let grid = e.component;
                grid.getDataSource().store().update(rowData.Codigo, rowData); // Actualiza el store
                grid.refresh(); // Refresca el grid para mostrar el cambio
            }
        },
        toolbar: {
            items: [
                {
                    location: "before",
                    widget: "dxButton",
                    options: {
                        text: "Eliminar fila seleccionada",
                        icon: "trash",
                        onClick() {
                            let grid = $("#gridContainerP_" + id).dxDataGrid("instance");
                            let selectedRow = grid.getSelectedRowKeys();
                            let dataSource = grid.getDataSource();
                            let dataArray = dataSource.items(); // Obtiene los datos visibles en el grid

                            if (selectedRow.length > 0) {
                                if (dataArray.length > 1) { // Solo elimina si hay más de una fila
                                    let store = dataSource.store();
                                    store.remove(selectedRow[0]);
                                    grid.refresh();
                                } else {
                                    DevExpress.ui.dialog.alert("Debe haber al menos un producto en la orden de compra.", "Aviso");
                                }
                            } else {
                                DevExpress.ui.dialog.alert("Por favor, selecciona una orden.", "Aviso");
                            }
                        }
                    }
                },
                /*{
                    location: "after",
                    widget: "dxButton",
                    options: {
                        text: "Guardar cambios",
                        icon: "save",
                        onClick() {
                            DevExpress.ui.dialog.alert("Valor Cambiado.", "Guardar cambios");
                        }
                    }
                }*/
            ]
        },
        export: {
            enabled: false,
        },
        hoverStateEnabled: false,
        filterRow: { visible: true },
        showColumnLines: true,
        showRowLines: true,
        rowAlternationEnabled: true,
        showBorders: true,
        paging: {
            pageSize: 10,
        }
    });


    $("#gridContainerL_" + id).dxDataGrid({
        dataSource: new DevExpress.data.ArrayStore({
            key: 'Codigo',
            data: [] // Se cargará después con `load`
        }),
        onInitialized(e) {
            let grid = e.component;
            sendRequest(`/Operaciones/ListarLotes?OcId=@Model[0].id&file=${filecreado}`).then(data => {
                grid.option("dataSource", new DevExpress.data.ArrayStore({
                    key: 'Codigo',
                    data: data
                }));
            });
        },
        allowExpandAll: true,
        expandAll: true,
        keyExpr: 'Codigo',
        allowSorting: false,
        allowFiltering: true,
        allowColumnResizing: true,
        height: 300,
        selection: {
            mode: "single"
        },
        editing: {
            mode: 'row',
            allowUpdating: true,
            allowAdding: true,
            allowDeleting: true,
            selectTextOnEditStart: true,
            startEditAction: 'click',
        },
        columns: [
            { dataField: 'Codigo', caption: 'Codigo', alignment: 'left', allowEditing: false },
            { dataField: 'NroLotes', caption: 'NroLotes', alignment: 'left', allowEditing: true },
            { dataField: 'Evaluacion', caption: 'Evaluacion', alignment: 'left', allowEditing: true },
            { dataField: 'Estado', caption: 'Estado', alignment: 'left', allowEditing: true },
            { dataField: 'Resultado', caption: 'Resultado', alignment: 'left', allowEditing: true },
            { dataField: 'Deposito', caption: 'Deposito', alignment: 'right', allowEditing: true },
            { dataField: 'Destino', caption: 'Destino', alignment: 'left', allowEditing: true },
        ],
        toolbar: {
            items: [
                /*{
                    location: "before",
                    widget: "dxButton",
                    options: {
                        text: "Eliminar fila seleccionada",
                        icon: "trash",
                        onClick() {
                            let grid = $("#gridContainerL_" + id).dxDataGrid("instance");
                            let selectedRow = grid.getSelectedRowKeys();
                            let dataSource = grid.getDataSource();
                            let dataArray = dataSource.items();

                            if (selectedRow.length > 0) {
                                if (dataArray.length > 1) {
                                    let store = dataSource.store();
                                    store.remove(selectedRow[0]);
                                    grid.refresh();
                                } else {
                                    DevExpress.ui.dialog.alert("Debe haber al menos un producto en la orden de compra.", "Aviso");
                                }
                            } else {
                                DevExpress.ui.dialog.alert("Por favor, selecciona una orden.", "Aviso");
                            }
                        }
                    }
                },*/
                {
                    location: "after",
                    widget: "dxButton",
                    options: {
                        text: "Agregar fila",
                        icon: "add",
                        onClick() {
                            let grid = $("#gridContainerL_" + id).dxDataGrid("instance");
                            let dataSource = grid.getDataSource();
                            let store = dataSource.store();

                            let nuevaFila = {
                                Codigo: "", // Genera un código único si es necesario
                                NroLotes: "",
                                Evaluacion: "",
                                Estado: "",
                                Resultado: "",
                                Deposito: "",
                                Destino: ""
                            };

                            store.insert(nuevaFila).done(() => {
                                grid.refresh();
                            });
                        }
                    }
                }
            ]
        },
        hoverStateEnabled: false,
        filterRow: { visible: true },
        showColumnLines: true,
        showRowLines: true,
        rowAlternationEnabled: true,
        showBorders: true,
        paging: {
            pageSize: 10,
        }
    });


    $("#gridContainerC_" + id).dxDataGrid({
        dataSource: [], // Data real
        columns: ["Contenedor", "Tamaño", "Ubicación"],
        showBorders: true

    });

    $("#gridContainerO_" + id).dxDataGrid({
        dataSource: [], // Data real
        columns: ["Operación", "Fecha", "Estado"],
        showBorders: true
    });

    $("#gridContainerF_" + id).dxDataGrid({
        dataSource: [], // Data real
        columns: ["Factura", "Monto", "Proveedor"],
        showBorders: true
    });

    // Ocultar todos los tabs excepto el primero
    $(".tab-contentss").hide();
    console.log("id: ", id);
    $("#tab1_" + id).show();

    // Manejar clic en las pestañas
    $("#tabMenu_" + id + " .nav-link").click(function (e) {
        e.preventDefault();

        var target = $(this).data("target");

        // Ocultar todos los tabs y mostrar solo el seleccionado
        $(".tab-contentss").hide();
        $("#" + target).show();

        // Marcar la pestaña activa
        $("#tabMenu_" + id + " .nav-link").removeClass("active");
        $(this).addClass("active");
    });






    function initializeGridP(idOrdenCompra = null, tabId) {
        console.log(`Inicializando grid en la pestaña ${tabId} con ID de orden: ${idOrdenCompra}`);

        const DxSource1 = new DevExpress.data.CustomStore({
            key: 'Codigo',
            load() {
                if (!idOrdenCompra) {
                    return Promise.resolve([]); // Corrección: DevExpress espera una Promise
                }
                return sendRequest(`/Operaciones/ListarProductos?idOc=${idOrdenCompra}`);
            },
        });
        // Verificar que el grid existe en la pestaña correcta
        let gridContainerP = `#gridContainerP_${tabId}`;
        if ($(gridContainerP).length === 0) {
            console.error(`No se encontró el contenedor del grid: ${gridContainerP}`);
            return;
        }
        $(gridContainerP).dxDataGrid({

        });
    }



</script>


<style>

    .tab-contentss {
        display: none;
    }

        .tab-contentss.active {
            display: block;
        }

    .tabpanel-demo {
        height: 100%;
    }

    .widget-container {
        display: flex;
        justify-content: center;
        flex-grow: 1;
        min-width: 360px;
        padding: 16px 32px;
    }

    .tabpanel-demo .dx-tabpanel {
        background-color: var(--dx-component-color-bg);
    }

    .dx-theme-material .widget-container {
        background-color: rgba(191, 191, 191, 0.15);
    }

    .dx-tabpanel-tabs-position-left .dx-tabpanel-container,
    .dx-tabpanel-tabs-position-right .dx-tabpanel-container {
        width: 0;
    }

    .dx-viewport:not(.dx-theme-generic) .dx-tabpanel {
        border-radius: 8px;
        overflow: clip;
    }

    .dx-tabs-vertical {
        min-width: 120px;
    }

    .options {
        display: inline-flex;
        flex-direction: column;
        flex-shrink: 0;
        box-sizing: border-box;
        width: 272px;
        padding: 20px;
        background-color: rgba(191, 191, 191, 0.15);
    }

    .caption {
        font-weight: 500;
        font-size: 18px;
    }

    .option {
        margin-top: 20px;
    }

    .tabpanel-item {
        display: flex;
        flex-direction: column;
        gap: 12px;
        padding: 24px;
    }

    .task-item {
        position: relative;
        display: flex;
        flex-direction: column;
        justify-content: center;
        width: 100%;
        height: 50px;
        padding: 8px 12px 8px 8px;
        border-radius: 4px;
        box-shadow: 0 1px 4px 0 rgba(0, 0, 0, 0.15);
    }

        .task-item::before {
            content: "";
            position: absolute;
            top: 8px;
            left: 6px;
            bottom: 8px;
            width: 3px;
            border-radius: 4px;
        }

    .task-item-priority-high::before {
        background-color: #e1bee7;
    }

    .task-item-priority-medium::before {
        background-color: #ffe0b2;
    }

    .task-item-priority-low::before {
        background-color: #c8e6c9;
    }

    .task-item-text,
    .task-item-info {
        margin: 0;
        padding: 0 24px 0 16px;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .task-item-info {
        font-size: 12px;
        opacity: 0.6;
    }

    .task-item-pseudo-button {
        position: absolute;
        right: 8px;
        top: 50%;
        font-size: 18px;
        transform: translateY(-50%);
        cursor: pointer;
        opacity: 0.6;
    }

    .dx-color-scheme-contrast .task-item {
        border: 1px solid #fff;
    }

    .dx-theme-fluent.dx-color-scheme-blue-dark .task-item {
        background-color: #1f1f1f;
    }
</style>